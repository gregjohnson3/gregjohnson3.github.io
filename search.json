[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "Blog 2.html",
    "href": "Blog 2.html",
    "title": "Greg Johnson's Blog",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\n\nstats <- read_csv(\"http://mattwaite.github.io/sportsdatafiles/stats23.csv\")\n\nRows: 363 Columns: 34\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): School, Season\ndbl (32): Rank, Games, OverallWins, OverallLosses, WinPct, OverallSRS, Overa...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nteams <- c(\"Nebraska\", \"Iowa\", \"Northwestern\", \"Minnesota\", \"Wisconsin\", \"Illinois\", \"Indiana\", \"Purdue\", \"Michigan\", \"Michigan State\", \"Ohio State\", \"Penn State\", \"Rutgers\", \"Maryland\")\n\nbigtournament <- c(\"Iowa\", \"Northwestern\", \"Maryland\", \"Indiana\", \"Penn State\", \"Illinois\", \"Michigan State\", \"Purdue\")\n\nbig <- stats %>% filter(School %in% teams)\n\nbigdance <- stats %>% filter(School %in% bigtournament)\n\nmi <- stats %>% filter(School == \"Michigan State\")\n\ntournament <- c(\"Iowa\", \"Northwestern\", \"Maryland\", \"Indiana\", \"Penn State\", \"Illinois\", \"Michigan State\", \"Purdue\", \"Fairleigh Dickinson\", \"Memphis\", \"Florida Atlantic\", \"Duke\", \"Oral Roberts\", \"Tennessee\", \"Louisiana\", \"Kentucky\", \"Providence\", \"Kansas State\", \"Montana State\", \"Southern California\", \"Marquette\", \"Vermont\", \"Houston\", \"Northern Kentucky\", \"Auburn\", \"Miami (FL)\", \"Drake\", \"Kent State\", \"Iowa State\", \"Pittsburgh\", \"Xavier\", \"Kennesaw State\", \"Texas A&M\", \"Texas\", \"Colgate\", \"Alabama\", \"Texas A&M-Corpus Christi\", \"West Virginia\", \"San Diego State\", \"College of Charleston\", \"Virginia\", \"Furman\", \"Creighton\", \"NC State\", \"Baylor\", \"UC Santa Barbara\", \"Missouri\", \"Utah State\", \"Arizona\", \"Princeton\", \"Kansas\", \"Howard\", \"Arkansas\", \"Saint Mary's (CA)\", \"Virginia Commonwealth\", \"Connecticut\", \"Iona\", \"TCU\", \"Arizona State\", \"Gonzaga\", \"Grand Canyon\", \"Boise State\", \"UCLA\", \"UNC Asheville\")\n\ndance <- stats %>% filter(School %in% tournament)\n\nsweettournament <- c(\"Michigan State\", \"Kansas State\", \"Arkansas\", \"Connecticut\", \"Florida Atlantic\", \"Tennessee\", \"Gonzaga\", \"UCLA\", \"San Diego State\", \"Alabama\", \"Miami (FL)\", \"Houston\", \"Princeton\", \"Creighton\", \"Xavier\", \"Texas\")\n\nsweetdance <- stats %>% filter(School %in% sweettournament)\n\ntop16 <- dance %>% \n  arrange(desc(OverallSOS)) %>% \n  top_n(16, wt=OverallSOS) %>% \n  select(School, OverallSOS)\n\nboth16 <- c(\"Alabama\", \"Arkansas\", \"Creighton\", \"Kansas State\", \"Michigan State\", \"Texas\", \"UCLA\", \"Xavier\")\n\nboth16dance <- stats %>% filter(School %in% both16)\n\nresidualmodel <- dance %>% mutate(averagedifferential = ForPoints/Games - OppPoints/Games)\n\n\n\nbigdanceresidual <- residualmodel %>% filter(School %in% bigtournament)\n\ndanceresidual <- residualmodel %>% filter(School %in% tournament)\n\nsweetdanceresidual <- residualmodel %>% filter(School %in% sweettournament)\n\nmiresidual <- residualmodel %>% filter(School == \"Michigan State\")\n\n\nhead(big)\n\n# A tibble: 6 × 34\n   Rank School      Games OverallWins OverallLosses WinPct OverallSRS OverallSOS\n  <dbl> <chr>       <dbl>       <dbl>         <dbl>  <dbl>      <dbl>      <dbl>\n1   120 Illinois       31          20            11  0.645       15.6       7.59\n2   124 Indiana        31          21            10  0.677       15.7       8.91\n3   127 Iowa           31          19            12  0.613       14.9       8.79\n4   164 Maryland       31          20            11  0.645       15.5       8.03\n5   175 Michigan       31          17            14  0.548       13.2       8.96\n6   176 Michigan S…    30          19            11  0.633       14.5      11.3 \n# ℹ 26 more variables: ConferenceWins <dbl>, ConferenceLosses <dbl>,\n#   HomeWins <dbl>, HomeLosses <dbl>, AwayWins <dbl>, AwayLosses <dbl>,\n#   ForPoints <dbl>, OppPoints <dbl>, Minutes <dbl>, FieldGoalsMade <dbl>,\n#   FieldGoalsAttempted <dbl>, FieldGoalPCT <dbl>, ThreePointMade <dbl>,\n#   ThreePointAttempts <dbl>, ThreePointPct <dbl>, FreeThrowsMade <dbl>,\n#   FreeThrowsAttempted <dbl>, FreeThrowPCT <dbl>, OffensiveRebounds <dbl>,\n#   TotalRebounds <dbl>, Assists <dbl>, Steals <dbl>, Blocks <dbl>, …\n\n\n\nhead(stats)\n\n# A tibble: 6 × 34\n   Rank School      Games OverallWins OverallLosses WinPct OverallSRS OverallSOS\n  <dbl> <chr>       <dbl>       <dbl>         <dbl>  <dbl>      <dbl>      <dbl>\n1     1 Abilene Ch…    29          13            16  0.448      -2.22       1.34\n2     2 Air Force      31          14            17  0.452       2.86       2.73\n3     3 Akron          31          21            10  0.677       4.37      -1.26\n4     4 Alabama        31          26             5  0.839      23.3       10.0 \n5     5 Alabama A&M    31          14            17  0.452     -10.3       -7   \n6     6 Alabama St…    31           8            23  0.258     -15.8       -5.73\n# ℹ 26 more variables: ConferenceWins <dbl>, ConferenceLosses <dbl>,\n#   HomeWins <dbl>, HomeLosses <dbl>, AwayWins <dbl>, AwayLosses <dbl>,\n#   ForPoints <dbl>, OppPoints <dbl>, Minutes <dbl>, FieldGoalsMade <dbl>,\n#   FieldGoalsAttempted <dbl>, FieldGoalPCT <dbl>, ThreePointMade <dbl>,\n#   ThreePointAttempts <dbl>, ThreePointPct <dbl>, FreeThrowsMade <dbl>,\n#   FreeThrowsAttempted <dbl>, FreeThrowPCT <dbl>, OffensiveRebounds <dbl>,\n#   TotalRebounds <dbl>, Assists <dbl>, Steals <dbl>, Blocks <dbl>, …\n\n\n\naverages<- stats %>% \n  group_by(School) %>% \n  summarise(\n    TotalPoints = sum(ForPoints), \n    TotalOpponentPoints = sum(OppPoints), \n    TotalGames = sum(Games)\n   ) %>% \n  mutate(\n    PPG = TotalPoints/TotalGames, \n    OppPPG = TotalOpponentPoints/TotalGames) \naverages %>%\n  summarise(AvgPPG = mean(PPG), AvgOppPPG = mean(OppPPG))\n\n# A tibble: 1 × 2\n  AvgPPG AvgOppPPG\n   <dbl>     <dbl>\n1   71.8      70.1\n\n\n\nbigfinddef <- averages %>% filter(School %in% teams) %>%\n  arrange(desc(OppPPG))\n\n\nbigfinddef %>%\n  arrange(desc(OppPPG))\n\n# A tibble: 14 × 6\n   School         TotalPoints TotalOpponentPoints TotalGames   PPG OppPPG\n   <chr>                <dbl>               <dbl>      <dbl> <dbl>  <dbl>\n 1 Iowa                  2498                2308         31  80.6   74.5\n 2 Minnesota             1817                2057         29  62.7   70.9\n 3 Michigan              2289                2159         31  73.8   69.6\n 4 Nebraska              2100                2158         31  67.7   69.6\n 5 Ohio State            2266                2150         31  73.1   69.4\n 6 Indiana               2333                2122         31  75.3   68.5\n 7 Penn State            2243                2113         31  72.4   68.2\n 8 Michigan State        2119                2021         30  70.6   67.4\n 9 Illinois              2313                2064         31  74.6   66.6\n10 Wisconsin             1956                1913         30  65.2   63.8\n11 Maryland              2192                1960         31  70.7   63.2\n12 Purdue                2268                1937         31  73.2   62.5\n13 Northwestern          2100                1932         31  67.7   62.3\n14 Rutgers               2113                1871         31  68.2   60.4\n\n\n\naverages %>%\n  arrange(desc(PPG))\n\n# A tibble: 363 × 6\n   School           TotalPoints TotalOpponentPoints TotalGames   PPG OppPPG\n   <chr>                  <dbl>               <dbl>      <dbl> <dbl>  <dbl>\n 1 Gonzaga                 2727                2282         31  88.0   73.6\n 2 Toledo                  2751                2443         32  86.0   76.3\n 3 Oral Roberts            2702                2261         32  84.4   70.7\n 4 Arizona                 2577                2229         31  83.1   71.9\n 5 Youngstown State        2658                2321         32  83.1   72.5\n 6 Southern Utah           2574                2280         31  83.0   73.5\n 7 Alabama                 2568                2156         31  82.8   69.5\n 8 Cornell                 2227                2049         27  82.5   75.9\n 9 UAB                     2634                2294         32  82.3   71.7\n10 Xavier                  2546                2309         31  82.1   74.5\n# ℹ 353 more rows\n\n\n\nggplot() +\n  geom_hline(yintercept=70.11547, color=\"black\") + \n  geom_vline(xintercept=71.81432, color=\"black\") +   \n  geom_point(data=stats, aes(x=ForPoints/Games, y=OppPoints/Games), size=1.75, color=\"grey\", alpha=.3) +\n  geom_point(data=big, aes(x=ForPoints/Games, y=OppPoints/Games), size=1.75, color=\"#0088ce\") +\n  geom_point(data=sweetdance, aes(x=ForPoints/Games, y=OppPoints/Games), size=1.75, color=\"red\") +\n  geom_point(data=mi, aes(x=ForPoints/Games, y=OppPoints/Games), size=1.75, color=\"#18453B\") + \n\n  labs(\n    title=\"Offensive and Defensive Points Per Game\",\n    subtitle=\"The Big Ten likes to play defense, but Sweet 16 teams can score\",\n    x=\"Points Per Game\", \n    y=\"Opponent Points Per Game\",\n    caption=\"Source: College Basketball Reference | By Greg Johnson\")+\n   geom_text(aes(x=82.5, y=81.5, label=\"Sweet 16 Teams\"), color=\"red\") +\n  geom_text(aes(x=82.5, y=78.5, label=\"Big Ten Teams\"), color=\"#0088ce\") +\n  geom_text(aes(x=68, y=67, label=\"Michigan State\\n(Big Ten and Sweet 16 Team)\"), size=3, color=\"#18453B\") +\n  geom_text(aes(x=82.5, y=60, label=\"Good Offense,\\nGood Defense\"), color=\"black\") +\n  geom_text(aes(x=62.5, y=80, label=\"Bad Offense,\\nBad Defense\"), color=\"black\") +\n  geom_text(aes(x=69.75, y=82.5, label=\"Average Points\\nPer Game\"), size=3, color=\"black\") +\n  geom_text(aes(x=60, y=72, label=\"Average Opponent\\nPoints Per Game\"), size=3, color=\"black\") +\n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    plot.title.position=\"plot\"\n    )\n\n\n\n\n\nstats %>%\n  arrange(desc(OverallSOS))\n\n# A tibble: 363 × 34\n    Rank School     Games OverallWins OverallLosses WinPct OverallSRS OverallSOS\n   <dbl> <chr>      <dbl>       <dbl>         <dbl>  <dbl>      <dbl>      <dbl>\n 1   134 Kansas        31          25             6  0.806       19.8      12.5 \n 2   225 Oklahoma      31          15            16  0.484       12.3      12.0 \n 3   176 Michigan …    30          19            11  0.633       14.5      11.3 \n 4    20 Baylor        31          22             9  0.71        18.5      11.2 \n 5   349 West Virg…    31          18            13  0.581       16.8      11.1 \n 6   226 Oklahoma …    31          17            14  0.548       13.7      11.0 \n 7   305 Texas         31          23             8  0.742       20.7      10.6 \n 8   128 Iowa State    30          18            12  0.6         16.8      10.4 \n 9     4 Alabama       31          26             5  0.839       23.3      10.0 \n10   136 Kansas St…    31          23             8  0.742       17.0       9.85\n# ℹ 353 more rows\n# ℹ 26 more variables: ConferenceWins <dbl>, ConferenceLosses <dbl>,\n#   HomeWins <dbl>, HomeLosses <dbl>, AwayWins <dbl>, AwayLosses <dbl>,\n#   ForPoints <dbl>, OppPoints <dbl>, Minutes <dbl>, FieldGoalsMade <dbl>,\n#   FieldGoalsAttempted <dbl>, FieldGoalPCT <dbl>, ThreePointMade <dbl>,\n#   ThreePointAttempts <dbl>, ThreePointPct <dbl>, FreeThrowsMade <dbl>,\n#   FreeThrowsAttempted <dbl>, FreeThrowPCT <dbl>, OffensiveRebounds <dbl>, …\n\n\n\nggplot() + \n  geom_bar(\n    data=big, \n    aes(\n      x=reorder(School, OverallSOS), \n      weight=OverallSOS), \n      fill=\"grey\"\n    ) + \n  geom_bar(\n    data=bigdance, \n    aes(\n      x=reorder(School, OverallSOS), \n      weight=OverallSOS), fill=\"#0088ce\"\n      \n    ) +\n  coord_flip() +\n labs(\n    title=\"Big Ten Strength of Schedule\",\n    subtitle=\"Sparty is not afraid of a fight\",\n    x=\"\", \n    y=\"Strength of Schedule\",\n    caption=\"Source: College Basketball Reference | By Greg Johnson\")+\n  geom_text(aes(x=\"Purdue\", y=9.75, label=\"Tournament\\nTeams\"), size=3.6, color=\"#0088ce\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    plot.title.position=\"plot\"\n    )\n\n\n\n\n\nresidualmodel <- dance %>% mutate(averagedifferential = ForPoints/Games - OppPoints/Games)\n\n\nfit <- lm(averagedifferential ~ WinPct, data = residualmodel)\nsummary(fit)\n\n\nCall:\nlm(formula = averagedifferential ~ WinPct, data = residualmodel)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.8301 -1.4411 -0.1062  1.2589  6.6289 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -13.178      2.307  -5.711 3.41e-07 ***\nWinPct        29.533      3.128   9.440 1.32e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.119 on 62 degrees of freedom\nMultiple R-squared:  0.5897,    Adjusted R-squared:  0.5831 \nF-statistic: 89.12 on 1 and 62 DF,  p-value: 1.317e-13\n\n\n\nresidualmodel <- residualmodel %>% mutate(predicted = predict(fit), residuals = residuals(fit))\n\n\nresidualmodel %>% arrange(desc(residuals)) %>% select(School, averagedifferential, WinPct, predicted, residuals)\n\n# A tibble: 64 × 5\n   School            averagedifferential WinPct predicted residuals\n   <chr>                           <dbl>  <dbl>     <dbl>     <dbl>\n 1 Tennessee                       14.4   0.71       7.79      6.63\n 2 Houston                         19.5   0.935     14.4       5.08\n 3 Connecticut                     14.2   0.767      9.47      4.73\n 4 Creighton                        8.97  0.645      5.87      3.10\n 5 Gonzaga                         14.4   0.839     11.6       2.75\n 6 Grand Canyon                     8.58  0.645      5.87      2.71\n 7 Arkansas                         7.58  0.613      4.93      2.65\n 8 Illinois                         8.03  0.645      5.87      2.16\n 9 Saint Mary's (CA)               12.6   0.806     10.6       1.95\n10 Iowa State                       6.30  0.6        4.54      1.76\n# ℹ 54 more rows\n\n\n\nggplot() + \n  geom_point(data=residualmodel, aes(x=averagedifferential, y=WinPct)) +\n  geom_smooth(data=residualmodel, aes(x=averagedifferential, y=WinPct), method=\"lm\", color=\"black\") +\n  geom_point(data=danceresidual, aes(x=averagedifferential, y=WinPct), size=1.75, color=\"grey\") +\n  geom_point(data=bigdanceresidual, aes(x=averagedifferential, y=WinPct), size=1.75, color=\"#0088ce\") +\n  geom_point(data=sweetdanceresidual, aes(x=averagedifferential, y=WinPct), size=1.75, color=\"red\") +\n  geom_point(data=miresidual, aes(x=averagedifferential, y=WinPct), size=1.75, color=\"#18453B\") +\n  \n  labs(\n    title=\"Point Differential and Win Percentage of Tournament Teams\",\n    subtitle=\"Big Ten teams like to keep it close, but Sweet 16 teams can run away with the game\",\n    x=\"Average Point Differential\", \n    y=\"Win Percentage\",\n    caption=\"Source: College Basketball Reference | By Greg Johnson\") +\n  geom_text(aes(x=5, y=.925, label=\"Sweet 16 Teams\"), color=\"red\") +\n  geom_text(aes(x=5, y=.875, label=\"Big Ten Teams\"), color=\"#0088ce\") +\n  geom_text(aes(x=2.5, y=.675, label=\"Michigan State\\n(Big Ten and\\nSweet 16 Team)\"), size=3, color=\"#18453B\") +\n  geom_text(aes(x=15.25, y=.775, label=\"National Champion\\nConnecticut\"), size=3, color=\"red\") +\n  geom_text(aes(x=12.3, y=.91, label=\"Nation Semifinalist\\nFlorida Atlantic\"), size=3, color=\"red\") +\n  geom_text(aes(x=15, y=.65, label=\"Teams that underperformed based on\\ntheir point differential fall below the line,\\nwhile teams that overperformed lie above the line\"), size=3, color=\"black\") +\n   geom_text(aes(x=16.25, y=.96, label=\"Expected win percentage based\\non average point differential\"), size=3, color=\"black\") +\n  \n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    plot.title.position=\"plot\"\n    )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\ndanceresidual %>%\n  arrange(desc(averagedifferential))\n\n# A tibble: 64 × 35\n    Rank School     Games OverallWins OverallLosses WinPct OverallSRS OverallSOS\n   <dbl> <chr>      <dbl>       <dbl>         <dbl>  <dbl>      <dbl>      <dbl>\n 1   115 Houston       31          29             2  0.935      23.9        4.39\n 2   301 Tennessee     31          22             9  0.71       22.6        8.23\n 3   104 Gonzaga       31          26             5  0.839      19.6        7.38\n 4    61 Connectic…    30          23             7  0.767      21.3        7.15\n 5   325 UCLA          31          27             4  0.871      22.6        8.62\n 6    57 College o…    32          29             3  0.906       8.82      -4.66\n 7   229 Oral Robe…    32          28             4  0.875       9.37      -2.67\n 8    89 Florida A…    31          28             3  0.903      13.0        0.43\n 9     4 Alabama       31          26             5  0.839      23.3       10.0 \n10   259 Saint Mar…    31          25             6  0.806      19.0        6.7 \n# ℹ 54 more rows\n# ℹ 27 more variables: ConferenceWins <dbl>, ConferenceLosses <dbl>,\n#   HomeWins <dbl>, HomeLosses <dbl>, AwayWins <dbl>, AwayLosses <dbl>,\n#   ForPoints <dbl>, OppPoints <dbl>, Minutes <dbl>, FieldGoalsMade <dbl>,\n#   FieldGoalsAttempted <dbl>, FieldGoalPCT <dbl>, ThreePointMade <dbl>,\n#   ThreePointAttempts <dbl>, ThreePointPct <dbl>, FreeThrowsMade <dbl>,\n#   FreeThrowsAttempted <dbl>, FreeThrowPCT <dbl>, OffensiveRebounds <dbl>, …"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest posts",
    "section": "",
    "text": "Using linear regression to draft fantasy rookies\n\n\n\n\n\n\n\nfantasy football\n\n\ncode\n\n\nanalysis\n\n\nreceivers\n\n\n\n\n\n\n\n\n\n\n\nMay 9, 2024\n\n\nGreg Johnson\n\n\n\n\n\n\n  \n\n\n\n\nUsing Code to Predict the 2024 March Madness Tournament\n\n\n\n\n\n\n\nncaa\n\n\nmachinelearning\n\n\nbasketball\n\n\n\n\n\n\n\n\n\n\n\nApr 15, 2024\n\n\nGreg Johnson\n\n\n\n\n\n\n  \n\n\n\n\nJalen Hurts proved himself as a fantasy QB1 in 2022\n\n\n\n\n\n\n\nqbs\n\n\nppg\n\n\nHurts\n\n\n\n\n\n\n\n\n\n\n\nMay 7, 2023\n\n\nGreg Johnson\n\n\n\n\n\n\n  \n\n\n\n\nThe Big Ten’s Short Lived 2023 March Madness\n\n\n\n\n\n\n\nppg\n\n\nsos\n\n\nsweetsixteen\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nGreg Johnson\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 20, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 17, 2023\n\n\nGreg Johnson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/best-fantasy-quarterback-is-jalen-hurts/index.html",
    "href": "posts/best-fantasy-quarterback-is-jalen-hurts/index.html",
    "title": "Jalen Hurts proved himself as a fantasy QB1 in 2022",
    "section": "",
    "text": "Every fall, millions of Americans compete against their friends, families and coworkers in Fantasy Football. Each participant, dubbed a team manager, drafts players in different football skill positions from different NFL teams in hopes that the players will lead him or her to victory. Players gain points for the manager in different ways. Touchdowns, yards and catches, for example, are all worth different values for the manager, and every week, the manager competes against a different manager in their league to score the most points.\nThe position that scores the most points is typically the quarterback. Many managers try to draft quarterbacks that put up good stats such as Patrick Mahomes or Josh Allen in the early rounds, but in 2022, there was a quarterback who outperformed everyone else in many ways that led many managers to the fantasy playoffs.\nWhen it comes to the ideal fantasy quarterback, athleticism and the ability to both pass and run the ball are much more important than winning games for their team. In fact, whether players’ NFL teams win or lose is irrelevant toward fantasy points. NFL players, and quarterbacks especially, cannot play forever, especially with good fantasy stats. In 2022, the top four point scoring quarterbacks in fantasy football were all under the age of 28, and they outscored the rest of the field significantly.\n\n\nCode\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\nlibrary(cowplot)\n\n\nurl <- \"https://www.pro-football-reference.com/years/2022/fantasy.htm\"\n\nfantasy22setup <- url %>%\n  read_html() %>%\n  html_nodes(xpath = '//*[@id=\"div_fantasy\"]') %>%\n  html_table(header=FALSE)\n\nfantasy22 <- fantasy22setup[[1]] %>% \n  rename(\n    Rk=X1, \n    Player=X2,\n    Tm=X3,\n    FantPos=X4,\n    Age=X5,\n    G=X6,\n    GS=X7,\n    Cmp=X8,\n    PassAtt=X9,\n    PassYds=X10,\n    PassTD=X11,\n    Int=X12,\n    RushAtt=X13,\n    RushYds=X14,\n    RushYPA=X15,\n    RushTD=X16,\n    RecTgt=X17,\n    Rec=X18,\n    RecYds=X19,\n    RecYPR=X20,\n    RecTD=X21,\n    Fmb=X22,\n    FmbL=X23,\n    RecRushTD=X24,\n    TwoPCMade=X25,\n    TwoPCPass=X26,\n    FantPt=X27,\n    PPR=X28,\n    DKPt=X29,\n    FDPt=X30,\n    VBD=X31,\n    PosRank=X32,\n    OvRank=X33\n  ) %>% \n  mutate_at(5:33, as.numeric)\n\nfantasy22withoutgarbage <- fantasy22 %>% \n  filter(Rk != \"Rk\" & G != \"Games\") \n\nfantasydata22 <- fantasy22withoutgarbage %>% \n  mutate(Player=gsub(\"\\\\*+\",\"\",Player),\n         Player=gsub(\"\\\\+\",\"\",Player))\n\nfantasystats22 <- fantasydata22 %>%\n  filter(PPR>0)\njh <- fantasystats22 %>% filter(Player == \"Jalen Hurts\")\n\npm <- fantasystats22 %>% filter(Player == \"Patrick Mahomes\")\nja <- fantasystats22 %>% filter(Player == \"Josh Allen\")\njb <- fantasystats22 %>% filter(Player == \"Joe Burrow\")\n\ntopplayers <- fantasystats22 %>%\n  filter(G>8)\n\nqbs <- fantasystats22 %>%\n  filter(FantPos==\"QB\", G>8)%>%\n  top_n(20, wt=PPR/G)\n\nggplot() +\n  geom_point(data=qbs, aes(x=Age, y=PPR), color=\"grey\") +\n  geom_point(data=jh, aes(x=Age, y=PPR), color=\"red\")+\n  geom_point(data=jb, aes(x=Age, y=PPR), color=\"red\")+\n  geom_point(data=ja, aes(x=Age, y=PPR), color=\"red\")+\n  geom_point(data=pm, aes(x=Age, y=PPR), color=\"red\")+\n  geom_text(aes(x=30.5, y=425, label=\"Patrick Mahomes\"), color=\"black\") +\n  geom_text(aes(x=28, y=395, label=\"Josh Allen\"), color=\"black\") +\n  geom_text(aes(x=24, y=365, label=\"Jalen Hurts\"), color=\"black\") +\n   geom_text(aes(x=28, y=345, label=\"Joe Burrow\"), color=\"black\") +\n  labs(title=\"Go with a young quarterback in fantasy\",\n       subtitle= \"In 2022, the top four quarterbacks were clearly set apart from the others, and they \\nwere all under the age of 28. \",\n       x=\"Age\", \n       y=\"Total PPR Points\",\n       caption=\"Source: Football Reference | By Greg Johnson\") + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position=\"plot\"\n    )\n\n\n\n\n\nNot every quarterback played in all 17 games on their schedule last season, so looking at per game averages will be more accurate in determining which quarterback performed the best last season.\nWhen it came to points per game, Philadelphia Eagles’ quarterback Jalen Hurts led all quarterbacks.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=qbs, \n    aes(\n      x=reorder(Player, PPR/G), \n      weight=PPR/G), \n      fill=\"grey\"\n    ) +\n  geom_bar(\n    data=jh, \n    aes(\n      x=reorder(Player, PPR/G), \n      weight=PPR/G), \n      fill=\"#004C45\"\n    ) +\n  coord_flip()+\n  labs(title=\"How did quarterback perform each game?\",\n       subtitle= \"Hurts led all quarterbacks in fantasy points per game in 2022.\",\n       x=\"\", \n       y=\"PPR Points per Game\",\n       caption=\"Source: Football Reference | By Greg Johnson\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position=\"plot\"\n    )\n\n\n\n\n\nWhy did Hurts lead all quarterbacks in fantasy points per game? He is not as flashy as Mahomes or Allen in terms of passing yards and touchdowns after all. \nWhat brought Hurts over the hump in points per game was leading all quarterbacks in rushing touchdowns and only throwing six interceptions on the season. These two stats can make or break a quarterback’s week in fantasy, and Hurts is one of only two quarterbacks (the other being the New York Giants’ Daniel Jones) to be in the top six of both stats.\n\n\nCode\nrushtdqbs <- qbs %>%\n  top_n(6, wt=RushTD)\n\nintqbs <- qbs %>%\n  top_n(6, wt=-Int)\n\nbar1 <- ggplot() + \n  geom_bar(data=rushtdqbs, aes(x=reorder(Player, RushTD), weight=RushTD), fill=\"grey\") +\n    geom_bar(data=jh, aes(x=reorder(Player, RushTD), weight=RushTD), fill=\"#004C54\") +\n  coord_flip() +\n  labs(title=\"Jalen Hurts puts up great fantasy stats\",\n       subtitle= \"He led quarterbacks in rushing touchdowns and was third least in interceptions.\",\n       x=\"\", \n       y=\"Rush TD\\n\",\n       caption=\"\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position=\"plot\"\n    )\n\nbar2 <- ggplot() + \n  geom_bar(data=intqbs, aes(x=reorder(Player, -Int), weight=Int), fill=\"grey\") +\n   geom_bar(data=jh, aes(x=reorder(Player, -Int), weight=Int), fill=\"#004C54\") +\n  coord_flip() +\n  labs(title= \"\",\n       subtitle= \"\",\n       x=\"\", \n       y=\"Interceptions thrown\\n(minimum 9 games played)\",\n      caption=\"Source: Football Reference | By Greg Johnson\") + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\nplot_grid(bar1, bar2) \n\n\n\n\n\nHurts was overlooked by many in 2022 fantasy drafts, and although Mahomes and Allen may still go before Hurts, expect him to be one of the first quarterbacks off the board in 2023."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/predicting-top-fantasy-rookie-receivers/index.html",
    "href": "posts/predicting-top-fantasy-rookie-receivers/index.html",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "",
    "text": "Every fall, fantasy football managers across the world always hit and miss on rookie wide receivers being added to the league. Here is a statistical model that values college production, as well as current NFL team situations, to predict what rookie wide receivers will produce the biggest point value for a fantasy team this fall.\nSo who are the top 10?"
  },
  {
    "objectID": "posts/predicting-top-fantasy-rookie-receivers/index.html#xavier-worthy-kansas-city-chiefs-drafted-28",
    "href": "posts/predicting-top-fantasy-rookie-receivers/index.html#xavier-worthy-kansas-city-chiefs-drafted-28",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "1. Xavier Worthy, Kansas City Chiefs, Drafted #28",
    "text": "1. Xavier Worthy, Kansas City Chiefs, Drafted #28\nThe fastset rookie in NFL history is looking to fit great with the Chiefs high flying offense. With last year’s leading receiver Rashee Rice in some legal trouble, Worthy could be a regular player in the rotation come week one."
  },
  {
    "objectID": "posts/predicting-top-fantasy-rookie-receivers/index.html#ricky-pearsall-san-francisco-49ers-drafted-31",
    "href": "posts/predicting-top-fantasy-rookie-receivers/index.html#ricky-pearsall-san-francisco-49ers-drafted-31",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "2. Ricky Pearsall, San Francisco 49ers, Drafted #31",
    "text": "2. Ricky Pearsall, San Francisco 49ers, Drafted #31\nThe 49ers led the league in yards per attempt and were second in total passing yards in 2023. The well rounded receiver out of Florida might not start right away, but after some growth with the team, he could be a huge factor later in the season."
  },
  {
    "objectID": "posts/predicting-top-fantasy-rookie-receivers/index.html#malik-nabers-new-york-giants-drafted-6",
    "href": "posts/predicting-top-fantasy-rookie-receivers/index.html#malik-nabers-new-york-giants-drafted-6",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "3. Malik Nabers, New York Giants, Drafted #6",
    "text": "3. Malik Nabers, New York Giants, Drafted #6\nLSU’s career leader in receptions and receiving yards heads to a struggling Giants team. Inconsistent quarterback play may hurt Nabers’ fantasy success."
  },
  {
    "objectID": "posts/predicting-top-fantasy-rookie-receivers/index.html#rome-odunze-chicago-bears-drafted-9",
    "href": "posts/predicting-top-fantasy-rookie-receivers/index.html#rome-odunze-chicago-bears-drafted-9",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "4. Rome Odunze, Chicago Bears, Drafted #9",
    "text": "4. Rome Odunze, Chicago Bears, Drafted #9\nOdunze may fill the role of Darnell Mooney in the Bears offense. He will be catching passes from a rookie quarterback in Caleb Williams, which could result in a lot of variability through the season."
  },
  {
    "objectID": "posts/predicting-top-fantasy-rookie-receivers/index.html#marvin-harrison-jr.-arizona-cardinals-drafted-4",
    "href": "posts/predicting-top-fantasy-rookie-receivers/index.html#marvin-harrison-jr.-arizona-cardinals-drafted-4",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "5. Marvin Harrison Jr., Arizona Cardinals, Drafted #4",
    "text": "5. Marvin Harrison Jr., Arizona Cardinals, Drafted #4\nThe Ohio State standout looks to be a strong add to a team who ranked in the bottom 10 in passing touchdowns, yards per attempt and passing yards last year. Harrison should be a lock with the team. The bigger question however is will the team be able to get itslef together to give Harrison success."
  },
  {
    "objectID": "posts/predicting-top-fantasy-rookie-receivers/index.html#brian-thomas-jr.-jacksonville-jaguars-drafted-23",
    "href": "posts/predicting-top-fantasy-rookie-receivers/index.html#brian-thomas-jr.-jacksonville-jaguars-drafted-23",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "6. Brian Thomas Jr., Jacksonville Jaguars, Drafted #23",
    "text": "6. Brian Thomas Jr., Jacksonville Jaguars, Drafted #23\nThomas led the nation with 17 touchdown receptions last season. With the Jaguars losing their number one yards and touchdowns leader from last year in Calvin Ridley, look for a lot of Trevor Lawrence passes being thrown Thomas’ way."
  },
  {
    "objectID": "posts/predicting-top-fantasy-rookie-receivers/index.html#keon-coleman-buffalo-bills-drafted-33",
    "href": "posts/predicting-top-fantasy-rookie-receivers/index.html#keon-coleman-buffalo-bills-drafted-33",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "7. Keon Coleman, Buffalo Bills, Drafted #33",
    "text": "7. Keon Coleman, Buffalo Bills, Drafted #33\nColeman is prime to be a key factor in the Bills offense with th departure of Stefon Diggs and Gabe Davis. Those two combines for nearly 50% of the Bills’ receiving touchdowns and yards, leaving much room for targets to fly Coleman’s way."
  },
  {
    "objectID": "posts/the-big-ten-sucks-at-march-madness/index.html",
    "href": "posts/the-big-ten-sucks-at-march-madness/index.html",
    "title": "The Big Ten’s Short Lived 2023 March Madness",
    "section": "",
    "text": "The Big Ten Conference sent eight teams to the NCAA Men’s Basketball Tournament this past March. Only one made it past the first weekend. Let’s find out why.\nScoring a lot of points and not allowing your opponent to score a lot are two great and simple ways to win a basketball game, so let’s take a look at average points and points allowed per game for each NCAA Division 1 team in the 2022-23 season.\nThe Big Ten is known to be a tough, defensive heavy conference, and the numbers prove it. Only two teams allow more points per game than the average D1 team does (Iowa and Minnesota). All 12 other teams have an above average defense when it comes to points allowed.\nWhen it comes to offense, that’s a different story. Iowa ranks 17th nationally in points per game with 80.6 ppg, but it takes all the way to 100th place for another Big Ten team to get up on the board (Indiana with 75.3 ppg). Overall, half of the Big Ten ranks above the average and half ranks below the average D1 team in points per game.\nBig Ten teams struggled to win two games to get to the Sweet 16 this year. Let’s take a look at how Sweet 16 qualifiers fared in points scored and allowed per game this past year.\nEleven Sweet 16 teams have scored more points per game than our second place Big Ten team Indiana. Eleven. Also, every single Sweet 16 team scored above the average in points per game and therefore they all fall into our “Good Offense” category. That is, all but one: Michigan State, who, you guessed it, plays in the Big Ten.\nIt appears that if you want to make a run in March, you better be able to score the ball or someone who can put up more points will end your season.\n\n\nCode\nlibrary(tidyverse)\n\nstats <- read_csv(\"http://mattwaite.github.io/sportsdatafiles/stats23.csv\")\n\nteams <- c(\"Nebraska\", \"Iowa\", \"Northwestern\", \"Minnesota\", \"Wisconsin\", \"Illinois\", \"Indiana\", \"Purdue\", \"Michigan\", \"Michigan State\", \"Ohio State\", \"Penn State\", \"Rutgers\", \"Maryland\")\n\nbigtournament <- c(\"Iowa\", \"Northwestern\", \"Maryland\", \"Indiana\", \"Penn State\", \"Illinois\", \"Michigan State\", \"Purdue\")\n\nbig <- stats %>% filter(School %in% teams)\n\nbigdance <- stats %>% filter(School %in% bigtournament)\n\nmi <- stats %>% filter(School == \"Michigan State\")\n\ntournament <- c(\"Iowa\", \"Northwestern\", \"Maryland\", \"Indiana\", \"Penn State\", \"Illinois\", \"Michigan State\", \"Purdue\", \"Fairleigh Dickinson\", \"Memphis\", \"Florida Atlantic\", \"Duke\", \"Oral Roberts\", \"Tennessee\", \"Louisiana\", \"Kentucky\", \"Providence\", \"Kansas State\", \"Montana State\", \"Southern California\", \"Marquette\", \"Vermont\", \"Houston\", \"Northern Kentucky\", \"Auburn\", \"Miami (FL)\", \"Drake\", \"Kent State\", \"Iowa State\", \"Pittsburgh\", \"Xavier\", \"Kennesaw State\", \"Texas A&M\", \"Texas\", \"Colgate\", \"Alabama\", \"Texas A&M-Corpus Christi\", \"West Virginia\", \"San Diego State\", \"College of Charleston\", \"Virginia\", \"Furman\", \"Creighton\", \"NC State\", \"Baylor\", \"UC Santa Barbara\", \"Missouri\", \"Utah State\", \"Arizona\", \"Princeton\", \"Kansas\", \"Howard\", \"Arkansas\", \"Saint Mary's (CA)\", \"Virginia Commonwealth\", \"Connecticut\", \"Iona\", \"TCU\", \"Arizona State\", \"Gonzaga\", \"Grand Canyon\", \"Boise State\", \"UCLA\", \"UNC Asheville\")\n\ndance <- stats %>% filter(School %in% tournament)\n\nsweettournament <- c(\"Michigan State\", \"Kansas State\", \"Arkansas\", \"Connecticut\", \"Florida Atlantic\", \"Tennessee\", \"Gonzaga\", \"UCLA\", \"San Diego State\", \"Alabama\", \"Miami (FL)\", \"Houston\", \"Princeton\", \"Creighton\", \"Xavier\", \"Texas\")\n\nsweetdance <- stats %>% filter(School %in% sweettournament)\n\ntop16 <- dance %>% \n  arrange(desc(OverallSOS)) %>% \n  top_n(16, wt=OverallSOS) %>% \n  select(School, OverallSOS)\n\nboth16 <- c(\"Alabama\", \"Arkansas\", \"Creighton\", \"Kansas State\", \"Michigan State\", \"Texas\", \"UCLA\", \"Xavier\")\n\nboth16dance <- stats %>% filter(School %in% both16)\n\nresidualmodel <- dance %>% mutate(averagedifferential = ForPoints/Games - OppPoints/Games)\n\n\n\nbigdanceresidual <- residualmodel %>% filter(School %in% bigtournament)\n\ndanceresidual <- residualmodel %>% filter(School %in% tournament)\n\nsweetdanceresidual <- residualmodel %>% filter(School %in% sweettournament)\n\nmiresidual <- residualmodel %>% filter(School == \"Michigan State\")\n\nggplot() +\n  geom_hline(yintercept=70.11547, color=\"black\") + \n  geom_vline(xintercept=71.81432, color=\"black\") +   \n  geom_point(data=stats, aes(x=ForPoints/Games, y=OppPoints/Games), size=1.75, color=\"grey\", alpha=.3) +\n  geom_point(data=big, aes(x=ForPoints/Games, y=OppPoints/Games), size=1.75, color=\"#0088ce\") +\n  geom_point(data=sweetdance, aes(x=ForPoints/Games, y=OppPoints/Games), size=1.75, color=\"red\") +\n  geom_point(data=mi, aes(x=ForPoints/Games, y=OppPoints/Games), size=1.75, color=\"#18453B\") + \n\n  labs(\n    title=\"Offensive and Defensive Points Per Game\",\n    subtitle=\"The Big Ten likes to play defense, but Sweet 16 teams can score\",\n    x=\"Points Per Game\", \n    y=\"Opponent Points Per Game\",\n    caption=\"Source: College Basketball Reference | By Greg Johnson\")+\n   geom_text(aes(x=82.5, y=81.5, label=\"Sweet 16 Teams\"), color=\"red\") +\n  geom_text(aes(x=82.5, y=78.5, label=\"Big Ten Teams\"), color=\"#0088ce\") +\n  geom_text(aes(x=68, y=67, label=\"Michigan State\\n(Big Ten and Sweet 16 Team)\"), size=3, color=\"#18453B\") +\n  geom_text(aes(x=82.5, y=60, label=\"Good Offense,\\nGood Defense\"), color=\"black\") +\n  geom_text(aes(x=62.5, y=80, label=\"Bad Offense,\\nBad Defense\"), color=\"black\") +\n  geom_text(aes(x=69.75, y=82.5, label=\"Average Points\\nPer Game\"), size=3, color=\"black\") +\n  geom_text(aes(x=60, y=72, label=\"Average Opponent\\nPoints Per Game\"), size=3, color=\"black\") +\n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    plot.title.position=\"plot\"\n    )\n\n\n\n\n\nThe Big Ten is typically seen to have lots of good teams year in a year out, but having a great team is a whole different animal. The last team from the conference to win the March Madness bracket was Michigan State in 2000 in Tom Izzo’s fifth year as head coach. And Izzo has not held up since, leading the Spartans to eight Final Four appearances since 1999, however only the 2000 squad took home a win in the final.\nHow has Sparty stayed competitive today? Coaching is obviously part of it, but what about the opponents Michigan State plays to prepare them for the grind of the conference schedule and the tournament?\nStrength of schedule is a measurement of the difficulty of each team’s opponent. Most college basketball teams do not have the ability to all play their conference opponents the same number of times, and with out of conference play, some teams will have much easier or harder schedules than others.\nIn the Big Ten, Michigan State leads the Big Ten with the hardest schedule significantly. Playing top teams such as Gonzaga, Kentucky and Alabama early in the season contributed to the high strength of schedule, but also gave Sparty experience for quality postseason opponents.\nWhen it comes to the rest of the conference, the other seven teams to make the tournament all fall in the bottom nine in strength of schedule. It appears the “beat a bunch of cupcake teams to look and feel good” method just might not be the way to win a National Title.\n“If you want to be the best, you have to beat the best.”\nMichigan State ended the season with the third hardest strength of schedule of all D1 teams but had no fear to play that tough schedule. It showed that they had experience when they beat 2 seeded Marquette and took 3 seeded Kansas State to Overtime in the NCAA tournament.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=big, \n    aes(\n      x=reorder(School, OverallSOS), \n      weight=OverallSOS), \n      fill=\"grey\"\n    ) + \n  geom_bar(\n    data=bigdance, \n    aes(\n      x=reorder(School, OverallSOS), \n      weight=OverallSOS), fill=\"#0088ce\"\n      \n    ) +\n  coord_flip() +\n labs(\n    title=\"Big Ten Strength of Schedule\",\n    subtitle=\"Sparty is not afraid of a fight\",\n    x=\"\", \n    y=\"Strength of Schedule\",\n    caption=\"Source: College Basketball Reference | By Greg Johnson\")+\n  geom_text(aes(x=\"Purdue\", y=9.75, label=\"Tournament\\nTeams\"), size=3.6, color=\"#0088ce\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    plot.title.position=\"plot\"\n    )\n\n\n\n\n\nWith the Big Ten being a defensive, survival and advance conference, many close games are bound to occur, right? What percent of games are tournament teams expected to have won based on their point differential?\nThe Big Ten has generally been underperforming or average in the realm of point differential. With only one team, Purdue, significantly above the line, it can be seen that it is very easy for Big Ten teams to rely on beating each other up in the middle of the pack to move up in the conference.\nRemember the log jam in the conference standings and the battle for Big Ten Tournament seeds? Most tournament Big Ten teams are log jammed in the 0.6-0.7 range for win percentage and no one in that group can seem to put together many dominant performances, but rather they just squeak by with single digit point differentials.\nWhen it comes to Sweet 16 teams, they are all over the place as they come from many different conferences with different opponents. Many Sweet 16 teams are Cinderella teams who just happen to be getting hot at the right time.\nThe biggest cluster of Sweet 16 teams comes at the top of the point differential rankings. Seven of the top nine average point differential leaders qualified for the Sweet 16 (The College of Charleston and Oral Roberts were the two to not survive the first weekend). I may have just found my new strategy to fill out my bracket next March. Why would a team that consistently beats down on its opponents let off the gas in the tournament? Of course, they wouldn’t.\nTake National Champion Connecticut. The Huskies averaged a point differential of 14.2. In their six NCAA Tournament games, they won each by an average of 21.7 points. The closest tournament game they played was a 13-point win against Miami (FL) in the Final Four. Florida Atlantic, which made a run to the Final Four as a nine seed, was also used to winning by large margins, averaging a point differential of 13.6 all season.\nComing in dead last of the Sweet 16 teams in point differential, and nearly win percentage as well, is, to no one’s surprise, the Big Ten’s own: Sparty.\n\n\nCode\nggplot() + \n  geom_point(data=residualmodel, aes(x=averagedifferential, y=WinPct)) +\n  geom_smooth(data=residualmodel, aes(x=averagedifferential, y=WinPct), method=\"lm\", color=\"black\") +\n  geom_point(data=danceresidual, aes(x=averagedifferential, y=WinPct), size=1.75, color=\"grey\") +\n  geom_point(data=bigdanceresidual, aes(x=averagedifferential, y=WinPct), size=1.75, color=\"#0088ce\") +\n  geom_point(data=sweetdanceresidual, aes(x=averagedifferential, y=WinPct), size=1.75, color=\"red\") +\n  geom_point(data=miresidual, aes(x=averagedifferential, y=WinPct), size=1.75, color=\"#18453B\") +\n  \n  labs(\n    title=\"Point Differential and Win Percentage of Tournament Teams\",\n    subtitle=\"Big Ten teams like to keep it close, but Sweet 16 teams can run away with the game\",\n    x=\"Average Point Differential\", \n    y=\"Win Percentage\",\n    caption=\"Source: College Basketball Reference | By Greg Johnson\") +\n  geom_text(aes(x=5, y=.925, label=\"Sweet 16 Teams\"), color=\"red\") +\n  geom_text(aes(x=5, y=.875, label=\"Big Ten Teams\"), color=\"#0088ce\") +\n  geom_text(aes(x=2.5, y=.675, label=\"Michigan State\\n(Big Ten and\\nSweet 16 Team)\"), size=3, color=\"#18453B\") +\n  geom_text(aes(x=15.25, y=.775, label=\"National Champion\\nConnecticut\"), size=3, color=\"red\") +\n  geom_text(aes(x=12.3, y=.91, label=\"Nation Semifinalist\\nFlorida Atlantic\"), size=3, color=\"red\") +\n  geom_text(aes(x=15, y=.65, label=\"Teams that underperformed based on\\ntheir point differential fall below the line,\\nwhile teams that overperformed lie above the line\"), size=3, color=\"black\") +\n   geom_text(aes(x=16.25, y=.96, label=\"Expected win percentage based\\non average point differential\"), size=3, color=\"black\") +\n  \n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    plot.title.position=\"plot\"\n    )\n\n\n\n\n\nThe Big Ten has some consistently good, but not great, basketball teams. They have cooked up a recipe to stay relevant in the college basketball realm, but from a statistical side, that recipe is nothing near winning a championship. Maybe that’s why Kevin Warren wanted to leave."
  },
  {
    "objectID": "posts/using-code-to-predict-the-march-madness-bracket-2024/index.html",
    "href": "posts/using-code-to-predict-the-march-madness-bracket-2024/index.html",
    "title": "Using Code to Predict the 2024 March Madness Tournament",
    "section": "",
    "text": "My Advanced Sports Data class at the #cojmcfamily at the University of Nebraska-Lincoln had a bracket challenge contest, and I got 10th place out of 11. Let’s break it down.\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(gt)\nlibrary(bonsai)\nset.seed(1234)\n\ngames <- load_mbb_team_box(seasons = 2015:2024) |> filter(game_date < as.Date(\"2024-03-18\"))\n\nnond1 <- games |> group_by(team_id, season) |> tally() |> filter(n < 10) |> select(team_id)\nnond1 <- pull(nond1)\n\ndf <- games |> filter(!team_id %in% nond1 & !opponent_team_id %in% nond1)\n\nteamside <- df |> \n  group_by(team_short_display_name, season) |> \n  arrange(game_date) |> \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_season_offensive_efficiency = lag(cummean(team_offensive_efficiency), n=1),\n    team_season_defensive_efficiency = lag(cummean(team_defensive_efficiency), n=1),  \n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin), \n    team_score_margin = team_score - opponent_team_score,\n    team_rolling_mean_score_margin = rollmean(lag(team_score_margin, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_mean_offensive_efficiency = rollmean(lag(team_offensive_efficiency, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_mean_defensive_efficiency = rollmean(lag(team_defensive_efficiency, n=1), k=5, align=\"right\", fill=NA),\n    team_free_throws_made = free_throws_made,\n    team_free_throw_pct = free_throw_pct,\n    team_season_free_throw_pct = lag(cummean(team_free_throw_pct), n=1),\n    team_season_free_throws_made = lag(cummean(team_free_throws_made), n=1),\n    team_offensive_rebounds_per_possession = offensive_rebounds/team_possessions,\n    team_steals_per_possession = steals/team_possessions,\n    team_steals = steals,\n    team_season_steals = lag(cummean(team_steals), n=1),\n    team_field_goals_attempted = field_goals_attempted,\n    team_free_throws_attempted = free_throws_attempted, \n    team_season_score_margin = lag(cummean(team_score_margin), n=1),\n    team_total_rebounds = total_rebounds,\n    team_season_total_rebounds = lag(cummean(team_total_rebounds), n=1),\n    team_rolling_total_rebounds = rollmean(lag(team_total_rebounds, n=1), k=5, align=\"right\", fill =NA),\n    team_fouls = fouls,\n    team_rebounds_per_possession = total_rebounds/team_possessions,\n    team_three_point_field_goals_made = three_point_field_goals_made,\n    team_rolling_three_point_field_goals_made = rollmean(lag(team_three_point_field_goals_made, n=1), k=5, align=\"right\", fill =NA),\n    team_three_point_field_goal_pct = three_point_field_goal_pct,\n    team_field_goals_made = field_goals_made,\n    team_rolling_total_field_goals_made = rollmean(lag(team_field_goals_made, n=1), k=5, align=\"right\", fill =NA),\n    team_field_goal_pct = field_goal_pct,\n    team_season_field_goal_pct = lag(cummean(team_field_goal_pct), n=1),\n    team_rolling_field_goal_pct = rollmean(lag(team_field_goal_pct, n=1), k=5, align=\"right\", fill =NA),\n    team_field_goals_made_per_possession = field_goals_made/team_possessions\n  ) |> \n  filter(absolute_score_margin <= 40) |>\n  ungroup()\n\nopponentside <- teamside |> \n  select(-opponent_team_id) |> \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_rolling_mean_offensive_efficiency = team_rolling_mean_offensive_efficiency,\n    opponent_rolling_mean_defensive_efficiency = team_rolling_mean_defensive_efficiency,\n    opponent_offensive_efficiency = team_offensive_efficiency,\n    opponent_defensive_efficiency = team_defensive_efficiency,\n    opponent_free_throws_made = team_free_throws_made,\n    opponent_season_free_throw_pct = team_season_free_throw_pct,\n    opponent_season_free_throws_made = team_season_free_throws_made,\n    opponent_offensive_rebounds_per_possession = team_offensive_rebounds_per_possession,\n    opponent_steals_per_possession = team_steals_per_possession,\n    opponent_season_steals = team_season_steals,\n    opponent_field_goals_attempted = team_field_goals_attempted,\n    opponent_free_throws_attempted = team_free_throws_attempted,\n    opponent_season_score_margin = team_season_score_margin,\n    opponent_rolling_mean_score_margin = team_rolling_mean_score_margin,\n    opponent_total_rebounds = team_total_rebounds,\n    opponent_season_total_rebounds = team_season_total_rebounds,\n    opponent_rolling_total_rebounds = team_rolling_total_rebounds,\n    opponent_fouls = team_fouls,\n    opponent_rebounds_per_possession = team_rebounds_per_possession,\n    opponent_three_point_field_goals_made = team_three_point_field_goals_made,\n    opponent_rolling_three_point_field_goals_made = team_rolling_three_point_field_goals_made,\n    opponent_three_point_field_goal_pct = team_three_point_field_goal_pct,\n    opponent_field_goals_made = team_field_goals_made,\n    opponent_rolling_total_field_goals_made = team_rolling_total_field_goals_made,\n    opponent_field_goal_pct = team_field_goal_pct,\n    opponent_season_field_goal_pct = team_season_field_goal_pct,\n    opponent_rolling_field_goal_pct = team_rolling_field_goal_pct,\n    opponent_field_goals_made_per_possession = team_field_goals_made_per_possession\n  ) |> \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    opponent_rolling_mean_offensive_efficiency,\n    opponent_rolling_mean_defensive_efficiency,\n    opponent_free_throws_made,\n    opponent_season_free_throws_made,\n    opponent_season_free_throw_pct,\n    opponent_offensive_rebounds_per_possession,\n    opponent_steals_per_possession,\n    opponent_season_steals,\n    opponent_field_goals_attempted,\n    opponent_free_throws_attempted,\n    opponent_season_score_margin,\n    opponent_rolling_mean_score_margin,\n    opponent_total_rebounds,\n    opponent_rolling_total_rebounds,\n    opponent_season_total_rebounds,\n    opponent_fouls,\n    opponent_rebounds_per_possession,\n    opponent_three_point_field_goals_made,\n    opponent_rolling_three_point_field_goals_made,\n    opponent_three_point_field_goal_pct,\n    opponent_field_goals_made,\n    opponent_rolling_total_field_goals_made,\n    opponent_field_goal_pct,\n    opponent_season_field_goal_pct,\n    opponent_rolling_field_goal_pct,\n    opponent_field_goals_made_per_possession\n  )\n\nbothsides <- teamside |> inner_join(opponentside)\n\nbothsides <- bothsides |> mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_team_score ~ \"W\",\n    opponent_team_score > team_score ~ \"L\"\n)))\n\nlevels(bothsides$team_result)\n\nbothsides$team_result <- relevel(bothsides$team_result, ref=\"W\")\n\nlevels(bothsides$team_result)\n\nmodelgames <- bothsides |> \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_result, \n    opponent_rolling_mean_offensive_efficiency,\n    opponent_rolling_mean_defensive_efficiency,\n    team_rolling_mean_offensive_efficiency,\n    team_rolling_mean_defensive_efficiency, \n    opponent_season_free_throws_made,\n    opponent_season_steals,\n    opponent_rolling_mean_score_margin,\n    opponent_season_total_rebounds,\n    opponent_rolling_total_rebounds,\n    opponent_rolling_three_point_field_goals_made,\n    opponent_rolling_total_field_goals_made,\n    opponent_season_field_goal_pct,\n    opponent_rolling_field_goal_pct,\n    ) |> na.omit()\n\ngame_split <- initial_split(modelgames, prop = .8)\ngame_train <- training(game_split)\ngame_test <- testing(game_split)\n\ngame_recipe <- \n  recipe(team_result ~ ., data = game_train) |> \n  update_role(game_id, game_date, team_short_display_name, opponent_team_short_display_name, season, new_role = \"ID\") |>\n  step_normalize(all_predictors())\n\nsummary(game_recipe)\n\n\nlightgbm_mod <- \n  boost_tree() |>\n  set_engine(\"lightgbm\") |>\n  set_mode(mode = \"classification\")\n\n\nlightgbm_workflow <- \n  workflow() |> \n  add_model(lightgbm_mod) |> \n  add_recipe(game_recipe)\n\n\nlightgbm_fit <- \n  lightgbm_workflow |> \n  fit(data = game_train)\n\n\nlightgbmpredict <- lightgbm_fit |> predict(new_data = game_train) |>\n  bind_cols(game_train) \n\nlightgbmpredict <- lightgbm_fit |> predict(new_data = game_train, type=\"prob\") |>\n  bind_cols(lightgbmpredict)\n\n\nmetrics(lightgbmpredict, team_result, .pred_class)\n\nlightgbmtestpredict <- lightgbm_fit |> predict(new_data = game_test) |>\n  bind_cols(game_test)\n\nlightgbmtestpredict <- lightgbm_fit |> predict(new_data = game_test, type=\"prob\") |>\n  bind_cols(lightgbmtestpredict)\n\nmetrics(lightgbmtestpredict, team_result, .pred_class)\n\n\nteamside <- df |> \n  group_by(team_short_display_name, season) |> \n  arrange(game_date) |> \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_season_offensive_efficiency = cummean(team_offensive_efficiency),\n    team_season_defensive_efficiency = cummean(team_defensive_efficiency),  \n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin), \n    team_score_margin = team_score - opponent_team_score,\n    team_rolling_mean_score_margin = rollmean(team_score_margin, k=10, align=\"right\", fill=NA),\n    team_rolling_mean_offensive_efficiency = rollmean(team_offensive_efficiency, k=5, align=\"right\", fill=NA),\n    team_rolling_mean_defensive_efficiency = rollmean(team_defensive_efficiency, k=5, align=\"right\", fill=NA),\n    team_free_throws_made = free_throws_made,\n    team_free_throw_pct = free_throw_pct,\n    team_season_free_throw_pct = cummean(team_free_throw_pct),\n    team_season_free_throws_made = cummean(team_free_throws_made),\n    team_offensive_rebounds_per_possession = offensive_rebounds/team_possessions,\n    team_steals_per_possession = steals/team_possessions,\n    team_steals = steals,\n    team_season_steals = cummean(team_steals),\n    team_field_goals_attempted = field_goals_attempted,\n    team_free_throws_attempted = free_throws_attempted, \n    team_season_score_margin = cummean(team_score_margin),\n    team_total_rebounds = total_rebounds,\n    team_season_total_rebounds = cummean(team_total_rebounds),\n    team_rolling_total_rebounds = rollmean(team_total_rebounds, k=5, align=\"right\", fill =NA),\n    team_fouls = fouls,\n    team_rebounds_per_possession = total_rebounds/team_possessions,\n    team_three_point_field_goals_made = three_point_field_goals_made,\n    team_rolling_three_point_field_goals_made = rollmean(team_three_point_field_goals_made, k=5, align=\"right\", fill =NA),\n    team_three_point_field_goal_pct = three_point_field_goal_pct,\n    team_field_goals_made = field_goals_made,\n    team_rolling_total_field_goals_made = rollmean(team_field_goals_made, k=5, align=\"right\", fill =NA),\n    team_field_goal_pct = field_goal_pct,\n    team_season_field_goal_pct = cummean(team_field_goal_pct),\n    team_rolling_field_goal_pct = rollmean(team_field_goal_pct, k=5, align=\"right\", fill =NA),\n    team_field_goals_made_per_possession = field_goals_made/team_possessions\n  ) |> \n  filter(absolute_score_margin <= 40) |>\n  ungroup()\n\nopponentside <- teamside |> \n  select(-opponent_team_id) |> \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_rolling_mean_offensive_efficiency = team_rolling_mean_offensive_efficiency,\n    opponent_rolling_mean_defensive_efficiency = team_rolling_mean_defensive_efficiency,\n    opponent_offensive_efficiency = team_offensive_efficiency,\n    opponent_defensive_efficiency = team_defensive_efficiency,\n    opponent_free_throws_made = team_free_throws_made,\n    opponent_season_free_throw_pct = team_season_free_throw_pct,\n    opponent_season_free_throws_made = team_season_free_throws_made,\n    opponent_offensive_rebounds_per_possession = team_offensive_rebounds_per_possession,\n    opponent_steals_per_possession = team_steals_per_possession,\n    opponent_season_steals = team_season_steals,\n    opponent_field_goals_attempted = team_field_goals_attempted,\n    opponent_free_throws_attempted = team_free_throws_attempted,\n    opponent_season_score_margin = team_season_score_margin,\n    opponent_rolling_mean_score_margin = team_rolling_mean_score_margin,\n    opponent_total_rebounds = team_total_rebounds,\n    opponent_season_total_rebounds = team_season_total_rebounds,\n    opponent_rolling_total_rebounds = team_rolling_total_rebounds,\n    opponent_fouls = team_fouls,\n    opponent_rebounds_per_possession = team_rebounds_per_possession,\n    opponent_three_point_field_goals_made = team_three_point_field_goals_made,\n    opponent_rolling_three_point_field_goals_made = team_rolling_three_point_field_goals_made,\n    opponent_three_point_field_goal_pct = team_three_point_field_goal_pct,\n    opponent_field_goals_made = team_field_goals_made,\n    opponent_rolling_total_field_goals_made = team_rolling_total_field_goals_made,\n    opponent_field_goal_pct = team_field_goal_pct,\n    opponent_season_field_goal_pct = team_season_field_goal_pct,\n    opponent_rolling_field_goal_pct = team_rolling_field_goal_pct,\n    opponent_field_goals_made_per_possession = team_field_goals_made_per_possession\n  ) |> \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    opponent_rolling_mean_offensive_efficiency,\n    opponent_rolling_mean_defensive_efficiency,\n    opponent_free_throws_made,\n    opponent_season_free_throws_made,\n    opponent_season_free_throw_pct,\n    opponent_offensive_rebounds_per_possession,\n    opponent_steals_per_possession,\n    opponent_season_steals,\n    opponent_field_goals_attempted,\n    opponent_free_throws_attempted,\n    opponent_season_score_margin,\n    opponent_rolling_mean_score_margin,\n    opponent_total_rebounds,\n    opponent_rolling_total_rebounds,\n    opponent_season_total_rebounds,\n    opponent_fouls,\n    opponent_rebounds_per_possession,\n    opponent_three_point_field_goals_made,\n    opponent_rolling_three_point_field_goals_made,\n    opponent_three_point_field_goal_pct,\n    opponent_field_goals_made,\n    opponent_rolling_total_field_goals_made,\n    opponent_field_goal_pct,\n    opponent_season_field_goal_pct,\n    opponent_rolling_field_goal_pct,\n    opponent_field_goals_made_per_possession\n  )\n\nbothsides <- teamside |> inner_join(opponentside)\n\nbothsides <- bothsides |> mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_team_score ~ \"W\",\n    opponent_team_score > team_score ~ \"L\"\n)))\n\nlevels(bothsides$team_result)\n\nbothsides$team_result <- relevel(bothsides$team_result, ref=\"W\")\n\nlevels(bothsides$team_result)\n\nmodelgames <- bothsides |> \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_result, \n    opponent_rolling_mean_offensive_efficiency,\n    opponent_rolling_mean_defensive_efficiency,\n    team_rolling_mean_offensive_efficiency,\n    team_rolling_mean_defensive_efficiency, \n    opponent_season_free_throws_made,\n    opponent_season_steals,\n    opponent_rolling_mean_score_margin,\n    opponent_season_total_rebounds,\n    opponent_rolling_total_rebounds,\n    opponent_rolling_three_point_field_goals_made,\n    opponent_rolling_total_field_goals_made,\n    opponent_season_field_goal_pct,\n    opponent_rolling_field_goal_pct,\n    ) |> na.omit()\n\neastround1games <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Stetson\"\n) |> add_row(\n  team_short_display_name=\"FAU\",\n  opponent_team_short_display_name=\"Northwestern\"\n) |> add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"UAB\"\n) |> add_row(\n  team_short_display_name=\"Auburn\",\n  opponent_team_short_display_name=\"Yale\"\n) |> add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Duquesne\"\n) |> add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |> add_row(\n  team_short_display_name=\"Washington St\",\n  opponent_team_short_display_name=\"Drake\"\n) |> add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\neastround1games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(eastround1games)\n\neastround1games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(eastround1games) \n\neastround1 <- lightgbm_fit |> predict(new_data = eastround1games) |>\n  bind_cols(eastround1games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1 <- lightgbm_fit |> predict(new_data = eastround1games, type=\"prob\") |>\n  bind_cols(eastround1) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1\n\nwestround1games <- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Wagner\"\n) |> add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |> add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n) |> add_row(\n  team_short_display_name=\"Alabama\",\n  opponent_team_short_display_name=\"Charleston\"\n) |> add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"New Mexico\"\n) |> add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_team_short_display_name=\"Colgate\"\n) |> add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Nevada\"\n) |> add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Long Beach St\"\n)\n\nwestround1games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(westround1games)\n\nwestround1games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(westround1games) \n\nwestround1 <- lightgbm_fit |> predict(new_data = westround1games) |>\n  bind_cols(westround1games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1 <- lightgbm_fit |> predict(new_data = westround1games, type=\"prob\") |>\n  bind_cols(westround1) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1\n\nsouthround1games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Longwood\"\n) |> add_row(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |> add_row(\n  team_short_display_name=\"Wisconsin\",\n  opponent_team_short_display_name=\"James Madison\"\n) |> add_row(\n  team_short_display_name=\"Duke\",\n  opponent_team_short_display_name=\"Vermont\"\n) |> add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"NC State\"\n) |> add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Oakland\"\n) |> add_row(\n  team_short_display_name=\"Florida\",\n  opponent_team_short_display_name=\"Colorado\"\n) |> add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Western KY\"\n)\n\nsouthround1games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(southround1games)\n\nsouthround1games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(southround1games) \n\nsouthround1 <- lightgbm_fit |> predict(new_data = southround1games) |>\n  bind_cols(southround1games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1 <- lightgbm_fit |> predict(new_data = southround1games, type=\"prob\") |>\n  bind_cols(southround1) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1\n\nmidwestround1games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Grambling\"\n) |> add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_team_short_display_name=\"TCU\"\n) |> add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"McNeese\"\n) |> add_row(\n  team_short_display_name=\"Kansas\",\n  opponent_team_short_display_name=\"Samford\"\n) |> add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Oregon\"\n) |> add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Akron\"\n) |> add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Colorado St\"\n) |> add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Saint Peter's\"\n)\n\nmidwestround1games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(midwestround1games)\n\nmidwestround1games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(midwestround1games) \n\nmidwestround1 <- lightgbm_fit |> predict(new_data = midwestround1games) |>\n  bind_cols(midwestround1games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1 <- lightgbm_fit |> predict(new_data = midwestround1games, type=\"prob\") |>\n  bind_cols(midwestround1) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1\n\neastround2games <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"FAU\"\n) |> add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"Auburn\"\n) |> add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Illinois\"\n) |> add_row(\n  team_short_display_name=\"Drake\",\n  opponent_team_short_display_name=\"Iowa State\"\n) \n\neastround2games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(eastround2games)\n\neastround2games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(eastround2games) \n\neastround2 <- lightgbm_fit |> predict(new_data = eastround2games) |>\n  bind_cols(eastround2games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2 <- lightgbm_fit |> predict(new_data = eastround2games, type=\"prob\") |>\n  bind_cols(eastround2) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2\n\nwestround2games <- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |> add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Alabama\"\n) |> add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Baylor\"\n) |> add_row(\n  team_short_display_name=\"Nevada\",\n  opponent_team_short_display_name=\"Arizona\"\n) \n\nwestround2games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(westround2games)\n\nwestround2games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(westround2games) \n\nwestround2 <- lightgbm_fit |> predict(new_data = westround2games) |>\n  bind_cols(westround2games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2 <- lightgbm_fit |> predict(new_data = westround2games, type=\"prob\") |>\n  bind_cols(westround2) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2\n\nsouthround2games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Nebraska\"\n) |> add_row(\n  team_short_display_name=\"James Madison\",\n  opponent_team_short_display_name=\"Duke\"\n) |> add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"Kentucky\"\n) |> add_row(\n  team_short_display_name=\"Colorado\",\n  opponent_team_short_display_name=\"Marquette\"\n)\n\nsouthround2games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(southround2games)\n\nsouthround2games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(southround2games) \n\nsouthround2 <- lightgbm_fit |> predict(new_data = southround2games) |>\n  bind_cols(southround2games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2 <- lightgbm_fit |> predict(new_data = southround2games, type=\"prob\") |>\n  bind_cols(southround2) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2\n\nmidwestround2games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"TCU\"\n) |> add_row(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Samford\"\n) |> add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Creighton\"\n) |> add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nmidwestround2games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(midwestround2games)\n\nmidwestround2games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(midwestround2games) \n\nmidwestround2 <- lightgbm_fit |> predict(new_data = midwestround2games) |>\n  bind_cols(midwestround2games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2 <- lightgbm_fit |> predict(new_data = midwestround2games, type=\"prob\") |>\n  bind_cols(midwestround2) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2\n\neastround3games <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Auburn\"\n) |> add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Iowa State\"\n) \n\neastround3games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(eastround3games)\n\neastround3games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(eastround3games) \n\neastround3 <- lightgbm_fit |> predict(new_data = eastround3games) |>\n  bind_cols(eastround3games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3 <- lightgbm_fit |> predict(new_data = eastround3games, type=\"prob\") |>\n  bind_cols(eastround3) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3\n\nwestround3games <- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) |> add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Arizona\"\n) \n\nwestround3games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(westround3games)\n\nwestround3games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(westround3games) \n\nwestround3 <- lightgbm_fit |> predict(new_data = westround3games) |>\n  bind_cols(westround3games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3 <- lightgbm_fit |> predict(new_data = westround3games, type=\"prob\") |>\n  bind_cols(westround3) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3\n\nsouthround3games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Duke\"\n) |> add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Colorado\"\n)\n\nsouthround3games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(southround3games)\n\nsouthround3games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(southround3games) \n\nsouthround3 <- lightgbm_fit |> predict(new_data = southround3games) |>\n  bind_cols(southround3games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3 <- lightgbm_fit |> predict(new_data = southround3games, type=\"prob\") |>\n  bind_cols(southround3) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3\n\nmidwestround3games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Samford\"\n) |> add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nmidwestround3games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(midwestround3games)\n\nmidwestround3games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(midwestround3games) \n\nmidwestround3 <- lightgbm_fit |> predict(new_data = midwestround3games) |>\n  bind_cols(midwestround3games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3 <- lightgbm_fit |> predict(new_data = midwestround3games, type=\"prob\") |>\n  bind_cols(midwestround3) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3\n\neastround4games <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"BYU\"\n) \n\neastround4games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(eastround4games)\n\neastround4games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(eastround4games) \n\neastround4 <- lightgbm_fit |> predict(new_data = eastround4games) |>\n  bind_cols(eastround4games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4 <- lightgbm_fit |> predict(new_data = eastround4games, type=\"prob\") |>\n  bind_cols(eastround4) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4\n\nwestround4games <- tibble(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Arizona\"\n) \n\nwestround4games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(westround4games)\n\nwestround4games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(westround4games) \n\nwestround4 <- lightgbm_fit |> predict(new_data = westround4games) |>\n  bind_cols(westround4games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4 <- lightgbm_fit |> predict(new_data = westround4games, type=\"prob\") |>\n  bind_cols(westround4) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4\n\nsouthround4games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Colorado\"\n)\n\nsouthround4games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(southround4games)\n\nsouthround4games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(southround4games) \n\nsouthround4 <- lightgbm_fit |> predict(new_data = southround4games) |>\n  bind_cols(southround4games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4 <- lightgbm_fit |> predict(new_data = southround4games, type=\"prob\") |>\n  bind_cols(southround4) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4\n\nmidwestround4games <- tibble(\n  team_short_display_name=\"Samford\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nmidwestround4games <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(midwestround4games)\n\nmidwestround4games <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(midwestround4games) \n\nmidwestround4 <- lightgbm_fit |> predict(new_data = midwestround4games) |>\n  bind_cols(midwestround4games) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4 <- lightgbm_fit |> predict(new_data = midwestround4games, type=\"prob\") |>\n  bind_cols(midwestround4) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4\n\nfinalfourgames <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Arizona\"\n) |> add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Tennessee\"\n) \n\nfinalfourgames <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(finalfourgames)\n\nfinalfourgames <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(finalfourgames) \n\nfinalfour <- lightgbm_fit |> predict(new_data = finalfourgames) |>\n  bind_cols(finalfourgames) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinalfour <- lightgbm_fit |> predict(new_data = finalfourgames, type=\"prob\") |>\n  bind_cols(finalfour) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinalfour\n\nnationalchampionshipgame <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Houston\"\n)\n\nnationalchampionshipgame <- modelgames |> \n  group_by(team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"opponent\")) |> \n  right_join(nationalchampionshipgame)\n\nnationalchampionshipgame <- modelgames |> \n  group_by(opponent_team_short_display_name) |> \n  filter(game_date == max(game_date) & season == 2024) |> \n  ungroup() |> \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |> \n  right_join(nationalchampionshipgame) \n\nnationalchampionship <- lightgbm_fit |> predict(new_data = nationalchampionshipgame) |>\n  bind_cols(nationalchampionshipgame) |> select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nnationalchampionship <- lightgbm_fit |> predict(new_data = nationalchampionshipgame, type=\"prob\") |>\n  bind_cols(nationalchampionship) |> select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nnationalchampionship\n\n\nUsing data from hoopR and lightGBM as a predictor, our class built prediction models that we could customize to what we think gives us the best shot at predicting the most NCAA Tournament games correctly. In my model, I added offensive and defensive efficiency, score margin, steals, free throws made, rebounds and a few more stats that I thought are especially important to helping a team win a basketball game. Some of these stats were cumulative to the whole season, and some were on a rolling basis of a team’s last 5 games.\nI had only ever filled out brackets using my judgement, so I was very excited to watch the tournament this year after I built and machine learning bracket.\nLet’s take a look at a regional:\n\n\nCode\nsouthround1 %>% \n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) %>%\n  gt() %>% \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) %>%\n  tab_header(\n    title = \"South Regional: Round 1\",\n    subtitle = \"I had the James Madison and Colorado upsets correct!\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Greg Johnson\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      South Regional: Round 1\n    \n    \n      I had the James Madison and Colorado upsets correct!\n    \n  \n  \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Houston\nW\n81.5%\nLongwood\n    Wisconsin\nL\n17.0%\nJames Madison\n    Kentucky\nW\n75.3%\nOakland\n    Florida\nL\n45.5%\nColorado\n    Texas Tech\nW\n54.6%\nNC State\n    Marquette\nW\n50.5%\nWestern KY\n    Nebraska\nW\n54.5%\nTexas A&M\n    Duke\nW\n65.0%\nVermont\n  \n  \n    \n      By: Greg Johnson\n    \n  \n  \n\n\n\n\nIn the South Regional, I was surprised to see that James Madison had such a high percentage to beat Wisconsin, but they ended up taking care of business so that was great. I ended up having Colorado going to the Elite 8, so I was pretty hyped when they hit a last second shot to beat Florida.\nIt is not easy to pick a Cinderella team in the NCAA Tournament, but I should have given a better opportunity for NC State to get on a run. The Wolfpack won 5 games in 5 days in the ACC Conference Tournament, and is a basketball team the summary of its whole season or the summary of its last few games? They were rolling, and nobody could stop them until the Final 4.\n\n\nCode\nsouthround2 %>% \n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) %>%\n  gt() %>% \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) %>%\n  tab_header(\n    title = \"South Regional: Round 2\",\n    subtitle = \"My Colorado Elite 8 pick dies by only 4 points\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Greg Johnson\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      South Regional: Round 2\n    \n    \n      My Colorado Elite 8 pick dies by only 4 points\n    \n  \n  \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    James Madison\nL\n45.4%\nDuke\n    Texas Tech\nL\n38.4%\nKentucky\n    Colorado\nW\n52.6%\nMarquette\n    Houston\nW\n68.3%\nNebraska\n  \n  \n    \n      By: Greg Johnson\n    \n  \n  \n\n\n\n\nHere, Houston, my predicted tournament champion, barely escapes in overtime against Texas A&M, and my Colorado run comes to a close. Things are not looking good going forward, and sure enough, Houston falls to Duke in the Sweet 16 and NC State makes the Final 4.\nOn ESPN Bracket Challenge, my bracket was titled, “The B1G sucks at BB”. I am in Nebraska’s pep band, so I have been keeping a close eye on Big Ten Basketball for the last three years. Last year, only 1 out of 8 B1G teams in the tournament made the Sweet 16, so Purdue playing in the championship game, and Illinois making the Elite 8 was a big surprise to me. The most games I had a Big Ten team winning was Illinois at 2. I tried to make my model reflect things I notice and think about at games, such as fighting for rebounds and steals and making free throws. I should have broadened my horizons to watch more conferences to see what stats matter to the rest of the country.\nIn the end, this can be a very reliable way to pick a solid bracket, but I do not think predicting games solely on stats is going to get anyone a perfect bracket."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Hello, my name is Greg Johnson. I am a UNL sports media and communication and broadcasting double major with minors in athletic coaching and music. I am a huge data and numbers fan, so this blog will be full of stats and findings. Enjoy!\n{width=50% %>% height=50%}\n{width=50% %>% height=50%} {width=50% %>% height=50%}"
  }
]